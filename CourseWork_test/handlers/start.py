from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from handlers.help import help_handler_instance
from handlers.news import news_handler_instance
from handlers.questions import questions_handler_instance
from handlers.schedule import cmd_schedule


class StartHandler:
    def __init__(self):
        self.router = Router()
        self.register_commands()

    def main_menu_keyboard(self):
        return types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üìÖ –†–æ–∑–∫–ª–∞–¥", callback_data="menu:schedule"),
                types.InlineKeyboardButton(text="üì∞ –©–æ –Ω–æ–≤–æ–≥–æ –≤ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ?", callback_data="menu:news"),
            ],
            [
                types.InlineKeyboardButton(text="‚ùì –ü–∏—Ç–∞–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω–∞", callback_data="menu:questions"),
            ],
            [
                types.InlineKeyboardButton(text="üÜò –î–æ–≤—ñ–¥–∫–∞", callback_data="menu:help")
            ]
        ])

    def register_commands(self):
        @self.router.message(Command("start"))
        async def cmd_start(message: types.Message, state: FSMContext):
            await state.clear()
            user_fullname = message.from_user.full_name
            await message.answer(
                f"–í—ñ—Ç–∞—é, {user_fullname}!! üëã\n\n"
                "–Ø ‚Äî —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫-–±–æ—Ç, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ —Ç–≤–æ—é –≤–∑–∞—î–º–æ–¥—ñ—é –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º –∑—Ä—É—á–Ω–∏–º, –∞–¥–∂–µ –≤ –º–µ–Ω–µ —Ç–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å, —è–∫—ñ –≤ —Ç–µ–±–µ –ø–∞—Ä–∏ –ø—Ä–æ—Ç—è–≥–æ–º —Ç–∏–∂–Ω—è üòà \n\n"
                "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏?? –ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ /help\n\n"
                "–û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∏–∂—á–µ ‚¨áÔ∏è",
                reply_markup=self.main_menu_keyboard()
            )

        @self.router.callback_query(lambda c: c.data and c.data.startswith("menu:"))
        async def global_callback_handler(callback: types.CallbackQuery, state: FSMContext):
            data = callback.data
            await state.clear()
            await callback.answer()

            if data == "menu:schedule":
                await cmd_schedule(callback, state)
            elif data == "menu:news":
                await news_handler_instance.send_last_news(callback.message)
            elif data == "menu:questions":
                await questions_handler_instance.ask_admin_command(callback.message, state)
            elif data == "menu:help":
                await help_handler_instance.cmd_help(callback.message)

    def register(self, dp):
        dp.include_router(self.router)

def register_handlers_start(dp):
    start_handler = StartHandler()
    start_handler.register(dp)
